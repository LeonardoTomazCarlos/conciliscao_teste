#!/usr/bin/env python3
"""
Script de teste para a nova implementa√ß√£o de procedimentos
"""

import requests
import json

BASE_URL = 'http://127.0.0.1:5000'

def test_procedimentos():
    """Testar as novas rotas de procedimentos"""
    
    print("üß™ TESTE - Nova implementa√ß√£o de procedimentos")
    print("=" * 50)
    
    # Teste 1: Listar procedimentos
    print("\n1Ô∏è‚É£ Testando GET /api/procedimentos")
    try:
        response = requests.get(f"{BASE_URL}/api/procedimentos")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Procedimentos encontrados: {len(data.get('procedimentos', []))}")
            if data.get('procedimentos'):
                proc = data['procedimentos'][0]
                print(f"   üìã Primeiro procedimento: {proc.get('uuid')} - {proc.get('tipo_procedimento')}")
        elif response.status_code == 401:
            print("‚ö†Ô∏è N√£o autenticado - teste via navegador necess√°rio")
        else:
            print(f"‚ùå Erro: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
    
    # Teste 2: Verificar estrutura do banco
    print("\n2Ô∏è‚É£ Verificando estrutura do banco")
    try:
        import sqlite3
        conn = sqlite3.connect('instance/conciliacao.db')
        cursor = conn.cursor()
        
        # Verificar se tabela existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='procedimento_conciliacao'")
        if cursor.fetchone():
            print("‚úÖ Tabela procedimento_conciliacao existe")
            
            # Contar registros
            cursor.execute("SELECT COUNT(*) FROM procedimento_conciliacao")
            count = cursor.fetchone()[0]
            print(f"üìä Total de procedimentos no banco: {count}")
            
            if count > 0:
                cursor.execute("SELECT uuid, tipo_procedimento, status FROM procedimento_conciliacao LIMIT 3")
                procs = cursor.fetchall()
                print("üìã Procedimentos encontrados:")
                for p in procs:
                    print(f"   - {p[0]} | {p[1]} | {p[2]}")
        else:
            print("‚ùå Tabela procedimento_conciliacao n√£o existe")
        
        # Verificar coluna procedimento_id em conciliacao
        cursor.execute("PRAGMA table_info(conciliacao)")
        columns = [col[1] for col in cursor.fetchall()]
        if 'procedimento_id' in columns:
            print("‚úÖ Coluna procedimento_id existe na tabela conciliacao")
        else:
            print("‚ùå Coluna procedimento_id n√£o existe na tabela conciliacao")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar banco: {e}")
    
    print("\n" + "=" * 50)
    print("üìã RESUMO DO TESTE")
    print("=" * 50)
    print("‚úÖ Para testar completamente:")
    print("1. Inicie o servidor: python app.py")
    print("2. Fa√ßa login no navegador: http://127.0.0.1:5000")
    print("3. Acesse a aba 'Hist√≥rico de Procedimentos'")
    print("4. Fa√ßa upload de arquivos para criar novos procedimentos")
    print("5. Clique em 'Ver' para visualizar detalhes")
    print("6. Clique em 'CSV' para exportar")

if __name__ == "__main__":
    test_procedimentos()
