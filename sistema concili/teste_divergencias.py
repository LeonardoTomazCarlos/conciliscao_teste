import requests
import os
import csv
from datetime import datetime, timedelta

def criar_arquivo_com_divergencias():
    """Cria arquivos com dados que geram diverg√™ncias"""
    
    # Arquivo 1: Extratos com valores diferentes dos lan√ßamentos
    extratos_divergentes = [
        {"data": "2024-01-15", "descricao": "Pagamento Fornecedor ABC", "valor": 1500.00, "tipo": "debito"},
        {"data": "2024-01-16", "descricao": "Recebimento Cliente XYZ", "valor": 2000.00, "tipo": "credito"},
        {"data": "2024-01-17", "descricao": "Pagamento Funcion√°rios", "valor": 3000.00, "tipo": "debito"},
        {"data": "2024-01-18", "descricao": "Venda Produto A", "valor": 3500.00, "tipo": "credito"},
        {"data": "2024-01-19", "descricao": "Pagamento Impostos", "valor": 800.00, "tipo": "debito"},
    ]
    
    # Arquivo 2: Lan√ßamentos com valores ligeiramente diferentes (diverg√™ncias)
    lancamentos_divergentes = [
        {"data": "2024-01-15", "descricao": "Pagamento Fornecedor ABC", "valor": 1500.50, "tipo": "debito"},  # Diferen√ßa de R$ 0,50
        {"data": "2024-01-16", "descricao": "Recebimento Cliente XYZ", "valor": 2000.00, "tipo": "credito"},  # Igual
        {"data": "2024-01-17", "descricao": "Pagamento Funcion√°rios", "valor": 2995.00, "tipo": "debito"},   # Diferen√ßa de R$ 5,00
        {"data": "2024-01-18", "descricao": "Venda Produto A", "valor": 3500.00, "tipo": "credito"},        # Igual
        {"data": "2024-01-19", "descricao": "Pagamento Impostos", "valor": 800.00, "tipo": "debito"},       # Igual
    ]
    
    # Arquivo 3: Extratos com duplicatas
    extratos_duplicatas = [
        {"data": "2024-01-20", "descricao": "Dep√≥sito Cliente", "valor": 1000.00, "tipo": "credito"},
        {"data": "2024-01-20", "descricao": "Dep√≥sito Cliente", "valor": 1000.00, "tipo": "credito"},  # Duplicata
        {"data": "2024-01-21", "descricao": "Transfer√™ncia", "valor": 500.00, "tipo": "credito"},
        {"data": "2024-01-22", "descricao": "Pagamento Servi√ßos", "valor": 250.00, "tipo": "debito"},
    ]
    
    # Criar arquivos CSV
    with open('extratos_divergentes.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=['Data', 'Descri√ß√£o', 'Valor', 'Tipo'])
        writer.writeheader()
        for extrato in extratos_divergentes:
            writer.writerow({
                'Data': extrato['data'],
                'Descri√ß√£o': extrato['descricao'],
                'Valor': extrato['valor'],
                'Tipo': extrato['tipo']
            })
    
    with open('lancamentos_divergentes.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=['Data', 'Descri√ß√£o', 'Valor', 'Tipo'])
        writer.writeheader()
        for lancamento in lancamentos_divergentes:
            writer.writerow({
                'Data': lancamento['data'],
                'Descri√ß√£o': lancamento['descricao'],
                'Valor': lancamento['valor'],
                'Tipo': lancamento['tipo']
            })
    
    with open('extratos_duplicatas.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=['Data', 'Descri√ß√£o', 'Valor', 'Tipo'])
        writer.writeheader()
        for extrato in extratos_duplicatas:
            writer.writerow({
                'Data': extrato['data'],
                'Descri√ß√£o': extrato['descricao'],
                'Valor': extrato['valor'],
                'Tipo': extrato['tipo']
            })
    
    print("‚úÖ Arquivos com diverg√™ncias criados:")
    print("   - extratos_divergentes.csv")
    print("   - lancamentos_divergentes.csv") 
    print("   - extratos_duplicatas.csv")

def testar_divergencias():
    """Testa o sistema de diverg√™ncias"""
    print("\nüß™ TESTE DE DIVERG√äNCIAS")
    print("=" * 50)
    
    # URL base
    base_url = "http://localhost:5000"
    session = requests.Session()
    
    # 1. Login
    print("1. Fazendo login...")
    login_data = {'username': 'admin', 'password': 'admin123'}
    login_response = session.post(f"{base_url}/login", json=login_data)
    
    if login_response.status_code == 200 and login_response.json().get('success'):
        print("‚úÖ Login realizado com sucesso!")
    else:
        print("‚ùå Falha no login")
        return
    
    # 2. Upload de extratos divergentes
    print("\n2. Upload de extratos divergentes...")
    with open('extratos_divergentes.csv', 'rb') as file:
        files = {'file': ('extratos_divergentes.csv', file, 'text/csv')}
        upload_response = session.post(f"{base_url}/api/upload-extrato", files=files)
        
        if upload_response.status_code == 200:
            result = upload_response.json()
            if result.get('success'):
                print(f"‚úÖ Extratos divergentes importados: {result.get('registros', 0)} registros")
            else:
                print(f"‚ùå Erro: {result.get('error')}")
    
    # 3. Upload de lan√ßamentos divergentes
    print("\n3. Upload de lan√ßamentos divergentes...")
    with open('lancamentos_divergentes.csv', 'rb') as file:
        files = {'file': ('lancamentos_divergentes.csv', file, 'text/csv')}
        upload_response = session.post(f"{base_url}/api/upload-lancamentos", files=files)
        
        if upload_response.status_code == 200:
            result = upload_response.json()
            if result.get('success'):
                print(f"‚úÖ Lan√ßamentos divergentes importados: {result.get('registros', 0)} registros")
            else:
                print(f"‚ùå Erro: {result.get('error')}")
    
    # 4. Upload de duplicatas
    print("\n4. Upload de extratos com duplicatas...")
    with open('extratos_duplicatas.csv', 'rb') as file:
        files = {'file': ('extratos_duplicatas.csv', file, 'text/csv')}
        upload_response = session.post(f"{base_url}/api/upload-extrato", files=files)
        
        if upload_response.status_code == 200:
            result = upload_response.json()
            if result.get('success'):
                print(f"‚úÖ Extratos com duplicatas importados: {result.get('registros', 0)} registros")
                print(f"   Duplicatas detectadas: {result.get('duplicatas', 0)}")
            else:
                print(f"‚ùå Erro: {result.get('error')}")
    
    # 5. Executar concilia√ß√£o autom√°tica
    print("\n5. Executando concilia√ß√£o autom√°tica...")
    conciliacao_response = session.post(f"{base_url}/api/conciliacao-automatica")
    if conciliacao_response.status_code == 200:
        result = conciliacao_response.json()
        if result.get('success'):
            print("‚úÖ Concilia√ß√£o autom√°tica executada!")
        else:
            print(f"‚ùå Erro na concilia√ß√£o: {result.get('error')}")
    
    # 6. Verificar diverg√™ncias
    print("\n6. Verificando diverg√™ncias...")
    divergencias_response = session.get(f"{base_url}/api/divergencias")
    if divergencias_response.status_code == 200:
        divergencias = divergencias_response.json()
        print(f"   üìä Total de diverg√™ncias: {len(divergencias)}")
        
        for i, div in enumerate(divergencias, 1):
            print(f"   {i}. Tipo: {div['tipo']} - {div['descricao']}")
    else:
        print("‚ùå Erro ao buscar diverg√™ncias")
    
    # 7. Verificar estat√≠sticas finais
    print("\n7. Estat√≠sticas finais...")
    stats_response = session.get(f"{base_url}/api/estatisticas")
    if stats_response.status_code == 200:
        stats = stats_response.json()
        print(f"   üìä Total de extratos: {stats.get('total_extratos', 0)}")
        print(f"   üìä Total de lan√ßamentos: {stats.get('total_lancamentos', 0)}")
        print(f"   üìä Extratos conciliados: {stats.get('extratos_conciliados', 0)}")
        print(f"   üìä Lan√ßamentos conciliados: {stats.get('lancamentos_conciliados', 0)}")
        print(f"   üìä Diverg√™ncias pendentes: {stats.get('divergencias_pendentes', 0)}")
    
    print("\nüéØ TESTE DE DIVERG√äNCIAS FINALIZADO!")

if __name__ == "__main__":
    # Criar arquivos de teste
    criar_arquivo_com_divergencias()
    
    # Executar testes
    testar_divergencias()
